
<div class="register-window content-labels">
    <h1 class="welcome">Welcome, new friend?</h1>
    <label name="Username" class="content-labels">Username :</label>
    <input for="Username" id="username" class="content-labels" name="Username">
    <label name="Email" class="content-labels">Email:</label>
    <div class="content-labels">
        
        <input class="email" id="email">
        <label>@bhaa.com</label>
    </div>
    <label class="content-labels" >Password:</label>
    <input type="password" class="content-labels" id="password">
    <div class="content-labels">
        <button class="btn" onclick="register()">regiser</button>
        <button class="btn" onclick="back()">back to login</button>
    </div>
    <h2 style="font-size: small; padding-left: 2vh; color:red;" id="errorMessage"></h2>
</div>
<script>
    function back(){
        
        window.location.replace('../');
    }
    async function register(){
        const username = document.getElementById('username').value;
        const email = document.getElementById('email').value;
        const password = document.getElementById('password').value;
        const errorMessage = document.getElementById('errorMessage');    
    
        if(checkAuth(username,email,password)){
            const userData = new FormData();
            userData.append('email',email);
            userData.append('password',password);
            userData.append('username',username);
            
            const response = await fetch('https://api-backend-of-my-app.onrender.com/api/User/register',{
                method:'POST',
                body: userData
            }).catch(error =>{
                console.log(error);
                errorMessage.innerHTML = 'something went wrong,try again later';
            });
            const data = response.json();
            if(data.ErrorOccured) errorMessage.innerHTML = data.ErrorMessage;
            data.then(result =>{
                if(result.ErrorOccured) errorMessage.innerHTML = result.ErrorMessage;
                else{
                   
                    const user= {
                                email:result.ReturnValue.Email,
                                password:result.ReturnValue.Password,
                                username : result.ReturnValue.UserName,
                            }
                    const jsonData = JSON.stringify(user);
                    console.log(jsonData);
                    fetch('../savelogin',{
                        method:'POST',
                        body: jsonData,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    }).catch(error=>console.log(error));
                            
                    window.location.replace('../user/homePage');
                }
            })
            
        }
    }
    function checkAuth(username,email,password){
        const erm = document.getElementById('errorMessage');
        console.log(email);
        if(username === undefined || username.length === 0) {
            erm.innerHTML = 'username is required';
            
            return false;
        }
        if(email === undefined || email.length === 0) {
            erm.innerHTML = 'email is required';
            return false;
        }
        if(password === undefined || password.length === 0) {
            erm.innerHTML = 'password is required';
            return false;
        }
        if(password.length <8){
            erm.innerHTML = 'password must be longer than 8';
            return false;
        }
        return true;
    }
</script>
<style>
    body {
    font-family: Bradley Hand, cursive;
    background-color: white;
}

.register-window{
    width:90%;
    max-width: 400px;
    margin: 15vh auto;
    background-color: rgb(38, 111, 129);
   border-radius: 5vh;
   padding-top: 5vh;
   padding-bottom: 10%;
   box-shadow: 10px 10px 10px rgba(0, 0, 0, 0.25);
   justify-content: center;
   align-items: center;
}

.welcome {
    color:white;
   margin-bottom: 5vh;
    font-size: large;
    text-align: center;
    
}

.content-labels{
    
    
    
    display: block;
 
}
label {
   padding-left: 2vh;
    
   color: white;
    margin-bottom: 1vh;
}
  
  input {
    color: white;
    margin-left: 2vh;
    border: 0px;
    border-bottom: 2px solid white;
    text-align:left;
    background: transparent;
    margin-bottom: 4vh;
    outline: 0;
    transition: border-color 0.2s ease-out;
  }
  input::placeholder {
  color: #000000;
}
  input:focus{
    
    border-width: 3px;
    border-color:rgb(255, 255, 255);
  }

  .email{
    width: 30%;
  }
.btn{
    color: white;
    background-color: transparent;
    margin-left: 4vh;
    margin-top: 3vh;
    font-size: medium;
    font-family: Bradley Hand, cursive;
    padding: 1vh;
    border-radius: 15px;
    border-color: #6daaa8;
    box-shadow: 10px 10px 10px rgba(0, 0, 0, 0.25);
}
</style>